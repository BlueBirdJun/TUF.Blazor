@using TUF.Client.Areas.Identity
 

<CascadingAuthenticationState>
 @*   <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(BaseLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(NotFound)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>*@

     <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(BaseLayout)">
                <NotAuthorized>
                    @if (@context.User.Identity?.IsAuthenticated is true)
                    {
                        <p>You are not authorized to be here.</p>
                    }
                    else
                    {
                        <Login />
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(NotFound)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>

</CascadingAuthenticationState>
@*
@code {

    private async Task OnNavigateAsync(NavigationContext args)
    { 
        var auth = await _localStorageService.GetItemAsync<string>("isauthenticated");
        if (string.IsNullOrEmpty(auth) && args.Path.ToLower().Contains("externalauth=true"))
        {
            auth = "true";
            await _localStorageService.SetItemAsStringAsync("isauthenticated", "true");
        }
        var user = (await (_authStateProvider as CustomAuthStateProvider)
        .GetAuthenticationStateAsync()).User;
        if (!string.IsNullOrEmpty(auth) && !user.Identity.IsAuthenticated)
        {
            var response = await _apiLogic.UserProfileAsync();
            if (response.Message == "Success")
            {
                (_authStateProvider as CustomAuthStateProvider)
                .SetAuthInfo(response.UserProfile);
            }
            else if (response.Message == "Unauthorized")
            {
                await _localStorageService.RemoveItemAsync("isauthenticated");
            }
        }

    }
}*@


